priority -50

## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet array "array"
$${1} = ['${2}' => ${3}]
endsnippet

snippet def "def"
define('${1}'${2});${3}
endsnippet

snippet do "do"
do {
	${2}
} while (${1});
endsnippet

snippet doc_f "doc_f"
/**
 * $2
 * @return ${4:void}
 * @author ${5:`!v g:snips_author`}
 **/
${1}function ${2:someFunc}(${3})
{${6}
}
endsnippet

snippet doc_i "doc_i"
/**
 * $1
 * @package ${2}
 * @author ${3:`!v g:snips_author`}
 **/
interface ${1}
{${4}
} // END interface $1"
endsnippet

snippet else "else"
else {
	${1}
}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4}
}
endsnippet

snippet foreachk "foreachk"
foreach ($${1} as $${2} => $${3}){
	${4}
}
endsnippet

snippet get "get"
$_GET['${1}']${2}
endsnippet

snippet if "if"
if (${1}) {
	${2}
}
endsnippet

snippet elif "elseif"
elseif (${1}) {
	${2}
}
endsnippet

snippet inc "inc"
include '${1}';${2}
endsnippet

snippet log "log"
error_log(var_export(${1}, true));${2}
endsnippet

snippet post "post"
$_POST['${1}']${2}
endsnippet

snippet req1 "req1"
require_once '${1}';${2}
endsnippet

snippet session "session"
$_SESSION['${1}']${2}
endsnippet

snippet t "t"
$${1} = (${2}) ? ${3} : ${4};${5}
endsnippet

snippet var "var"
var_export(${1});${2}
endsnippet

snippet getter "PHP Class Getter" b
/**
 * Getter for $1
 *
 * ${2:return string}
 */
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;
}${3}
endsnippet

snippet setter "PHP Class Setter" b
public function set${1/\w+\s*/\u$0/}($${1})
{
    $this->_$1 = $$1;
    return $this;
}$0
endsnippet

snippet gs "PHP Class Getter Setter" b
/**
 * Getter for $1
 *
 * return ${2:string}
 */
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;$3
}

/**
 * Setter for $1
 *
 * @param $2 $$1
 * @return ${4:`!p snip.rv=snip.basename`}
 */
public function set${1/\w+\s*/\u$0/}(${5:${2/(void|string|int|integer|double|float|object|boolear|null|mixed|number|resource)|(.*)/(?1::$2 )/}}$$1)
{
    $this->$1 = $$1;$6
    ${7:return $this;}
}$0
endsnippet

snippet pub "Public function" b
public function ${1}(${2})
{
	${3}
}$0
endsnippet

snippet pro "Protected function" b
protected function ${1}(${2})
{
	${3}
}$0
endsnippet

snippet pri "Private function" b
private function ${1}(${2})
{
	${3}
}$0
endsnippet

snippet pubs "Public static function" b
public static function ${1}(${2})
{
	${3}
}$0
endsnippet

snippet pros "Protected static function" b
protected static function ${1}(${2})
{
	${3}
}$0
endsnippet

snippet pris "Private static function" b
private static function ${1}(${2})
{
	${3}
}$0
endsnippet

snippet fu "Function snip" b
function ${1}(${2})
{
	${3}
}$0
endsnippet

snippet fore "Foreach loop"
foreach ($${1} as $${3}){
	${4}
}$0
endsnippet

snippet new "New class instance" b
$$1 = new $1($2);
$0
endsnippet

snippet ife "if else"
if (${1}) {
	${2}
} else {
	${3}
}$0
endsnippet

snippet ns "namespace declaration" b
namespace ${1:`!p
abspath = os.path.abspath(path)
m = re.search(r'[A-Z].+(?=/)', abspath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};
endsnippet

snippet class "Class declaration template" b
<?php

namespace ${1:`!p
abspath = os.path.abspath(path)
m = re.search(r'[A-Z].+(?=/)', abspath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

/**
 * Class ${1:`!p snip.rv=snip.basename`}
 * @author ${2:`!v g:snips_author`}
 */
class $1
{
}
endsnippet

snippet interface "Interface declaration template" b
<?php

namespace ${1:`!p
abspath = os.path.abspath(path)
m = re.search(r'[A-Z].+(?=/)', abspath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

/**
 * Interface ${1:`!p snip.rv=snip.basename`}
 * @author ${2:`!v g:snips_author`}
 */
interface $1
{
	public function ${3}();
}
endsnippet


snippet construct "__construct()" b
public function __construct(${1})
{${1/\$(\w+)(, )*/\n        $this->$1 = $$1;/g}
}$0
endsnippet

snippet vd "var_dump"
var_dump(${1}); die();
endsnippet

snippet ve "Dumb debug helper in HTML"
    echo '<pre>' . var_export($1, 1) . '</pre>';$0
endsnippet

snippet pc "Dumb debug helper in cli"
var_export($1);$0
endsnippet

# Symfony 2 based snippets
snippet sfa "Symfony 2 Controller action"
/**
* @Route("/${1:route_name}", name="$1")
* @Template()
*/
public function $1Action($2)
{
	$3
	return ${4:array();}$0
}
endsnippet

snippet inheritdoc "@inheritdoc docblock"
/**
 * {@inheritdoc}
 */
endsnippet

# :vim:ft=snippets:
